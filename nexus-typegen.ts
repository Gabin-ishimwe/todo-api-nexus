/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { ContextType } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  SortingTasks: { // input type
    createdAt?: NexusGenEnums['SortInput'] | null; // SortInput
    title?: NexusGenEnums['SortInput'] | null; // SortInput
  }
}

export interface NexusGenEnums {
  SortInput: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Category: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: number | null; // Int
    name?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Feed: { // root type
    count: number; // Int!
    id?: string | null; // ID
    tasks: NexusGenRootTypes['Task'][]; // [Task!]!
  }
  Mutation: {};
  Query: {};
  Task: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    id?: number | null; // Int
    isDone?: boolean | null; // Boolean
    title?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  User: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    firstName?: string | null; // String
    id?: number | null; // Int
    lastName?: string | null; // String
    password?: string | null; // String
    token?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Category: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number | null; // Int
    name: string | null; // String
    tasks: Array<NexusGenRootTypes['Task'] | null>; // [Task]!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Feed: { // field return type
    count: number; // Int!
    id: string | null; // ID
    tasks: NexusGenRootTypes['Task'][]; // [Task!]!
  }
  Mutation: { // field return type
    addCategory: NexusGenRootTypes['Category'] | null; // Category
    createTask: NexusGenRootTypes['Task']; // Task!
    deleteCategory: NexusGenRootTypes['Category'] | null; // Category
    deleteTask: NexusGenRootTypes['Task']; // Task!
    markAllDone: NexusGenRootTypes['Task'] | null; // Task
    markDone: NexusGenRootTypes['Task'] | null; // Task
    updateCategory: NexusGenRootTypes['Category'] | null; // Category
    updateTask: NexusGenRootTypes['Task'] | null; // Task
    userLogin: NexusGenRootTypes['User'] | null; // User
    userRegister: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    ReadCategory: NexusGenRootTypes['Category']; // Category!
    ReadTask: NexusGenRootTypes['Task']; // Task!
    allMarkDone: Array<NexusGenRootTypes['Task'] | null>; // [Task]!
    allUsers: Array<NexusGenRootTypes['User'] | null>; // [User]!
    categories: Array<NexusGenRootTypes['Category'] | null>; // [Category]!
    feed: NexusGenRootTypes['Feed']; // Feed!
  }
  Task: { // field return type
    category: NexusGenRootTypes['Category']; // Category!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    id: number | null; // Int
    isDone: boolean | null; // Boolean
    title: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null>; // [Category]!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    firstName: string | null; // String
    id: number | null; // Int
    lastName: string | null; // String
    password: string | null; // String
    tasks: Array<NexusGenRootTypes['Task'] | null>; // [Task]!
    token: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Category: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    name: 'String'
    tasks: 'Task'
    updatedAt: 'DateTime'
  }
  Feed: { // field return type name
    count: 'Int'
    id: 'ID'
    tasks: 'Task'
  }
  Mutation: { // field return type name
    addCategory: 'Category'
    createTask: 'Task'
    deleteCategory: 'Category'
    deleteTask: 'Task'
    markAllDone: 'Task'
    markDone: 'Task'
    updateCategory: 'Category'
    updateTask: 'Task'
    userLogin: 'User'
    userRegister: 'User'
  }
  Query: { // field return type name
    ReadCategory: 'Category'
    ReadTask: 'Task'
    allMarkDone: 'Task'
    allUsers: 'User'
    categories: 'Category'
    feed: 'Feed'
  }
  Task: { // field return type name
    category: 'Category'
    createdAt: 'DateTime'
    description: 'String'
    id: 'Int'
    isDone: 'Boolean'
    title: 'String'
    updatedAt: 'DateTime'
    user: 'User'
  }
  User: { // field return type name
    categories: 'Category'
    createdAt: 'DateTime'
    email: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    password: 'String'
    tasks: 'Task'
    token: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addCategory: { // args
      name: string; // String!
    }
    createTask: { // args
      categoryId: number; // Int!
      description: string; // String!
      title: string; // String!
    }
    deleteCategory: { // args
      id: number; // Int!
    }
    deleteTask: { // args
      id: number; // Int!
    }
    markDone: { // args
      id: number; // Int!
    }
    updateCategory: { // args
      id: number; // Int!
      name: string; // String!
    }
    updateTask: { // args
      description?: string | null; // String
      id: number; // Int!
      title?: string | null; // String
    }
    userLogin: { // args
      email: string; // String!
      password: string; // String!
    }
    userRegister: { // args
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
    }
  }
  Query: {
    ReadCategory: { // args
      id: number; // Int!
    }
    ReadTask: { // args
      id: number; // Int!
    }
    feed: { // args
      orderBy?: NexusGenInputs['SortingTasks'][] | null; // [SortingTasks!]
      skip?: number | null; // Int
      take?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextType;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}